{"remainingRequest":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/babel-loader/lib/index.js!/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/src/components/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/src/components/Home.vue","mtime":1552112712000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\n\nvar _this = this;\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  components: {},\n  data: function data() {\n    return {\n      isConnected: false,\n      name: \"\",\n      message: \"\",\n      currentUser: {},\n      users: [],\n      events: []\n    };\n  },\n  sockets: {\n    connect: function connect() {\n      this.isConnected = true;\n    },\n    disconnect: function disconnect() {\n      this.isConnected = false;\n    },\n    currentEvents: function currentEvents(events) {\n      this.events = events;\n    },\n    currentUsers: function currentUsers(users) {\n      this.users = users;\n    }\n  },\n  created: function created() {\n    // document.addEventListener(\"beforeunload\", () => this.disconnectUser)\n    window.addEventListener(\"beforeunload\", this.disconnectUser);\n  },\n  computed: {\n    filteredUsers: function filteredUsers() {\n      return _this.users.filter(function (user) {\n        return user.name !== _this.currentUser.name;\n      });\n    },\n    isOwnEvent: function isOwnEvent(event) {\n      return event.id === _this.currentUser.id;\n    }\n  },\n  methods: {\n    connectUser: function () {\n      var _connectUser = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // let self = this\n                this.$socket.emit('userJoined', {\n                  name: this.name\n                }, function (data) {\n                  // this.currentUser = Object.assign({}, JSON.parse(JSON.stringify(data)))\n                  _this2.currentUser = data;\n                });\n                this.name = \"\";\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connectUser() {\n        return _connectUser.apply(this, arguments);\n      }\n\n      return connectUser;\n    }(),\n    disconnectUser: function disconnectUser() {\n      if (this.currentUser.name) {\n        this.$socket.emit('userLeft', this.currentUser);\n      }\n    },\n    sendMessage: function sendMessage() {\n      var newMessage = {\n        message: this.message,\n        type: 'message',\n        sender: this.currentUser.id\n      };\n      this.$socket.emit('eventSent', newMessage);\n      this.message = \"\";\n    }\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,eAAA;AACA,EAAA,UAAA,EAAA,EADA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,KADA;AAEA,MAAA,IAAA,EAAA,EAFA;AAGA,MAAA,OAAA,EAAA,EAHA;AAIA,MAAA,WAAA,EAAA,EAJA;AAKA,MAAA,KAAA,EAAA,EALA;AAMA,MAAA,MAAA,EAAA;AANA,KAAA;AAQA,GAZA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,WAAA,WAAA,GAAA,IAAA;AACA,KAHA;AAIA,IAAA,UAJA,wBAIA;AACA,WAAA,WAAA,GAAA,KAAA;AACA,KANA;AAOA,IAAA,aAPA,yBAOA,MAPA,EAOA;AACA,WAAA,MAAA,GAAA,MAAA;AACA,KATA;AAUA,IAAA,YAVA,wBAUA,KAVA,EAUA;AACA,WAAA,KAAA,GAAA,KAAA;AACA;AAZA,GAbA;AA2BA,EAAA,OA3BA,qBA2BA;AACA;AACA,IAAA,MAAA,CAAA,gBAAA,CAAA,cAAA,EAAA,KAAA,cAAA;AACA,GA9BA;AA+BA,EAAA,QAAA,EAAA;AACA,IAAA,aAAA,EAAA,yBAAA;AACA,aAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,IAAA,KAAA,KAAA,CAAA,WAAA,CAAA,IAAA;AAAA,OAAA,CAAA;AACA,KAHA;AAIA,IAAA,UAAA,EAAA,oBAAA,KAAA;AAAA,aAAA,KAAA,CAAA,EAAA,KAAA,KAAA,CAAA,WAAA,CAAA,EAAA;AAAA;AAJA,GA/BA;AAqCA,EAAA,OAAA,EAAA;AACA,IAAA,WADA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEA;AACA,qBAAA,OAAA,CAAA,IAAA,CAAA,YAAA,EAAA;AAAA,kBAAA,IAAA,EAAA,KAAA;AAAA,iBAAA,EAAA,UAAA,IAAA,EAAA;AACA;AACA,kBAAA,MAAA,CAAA,WAAA,GAAA,IAAA;AACA,iBAHA;AAIA,qBAAA,IAAA,GAAA,EAAA;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AASA,IAAA,cATA,4BASA;AACA,UAAA,KAAA,WAAA,CAAA,IAAA,EAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA,UAAA,EAAA,KAAA,WAAA;AACA;AACA,KAbA;AAcA,IAAA,WAdA,yBAcA;AACA,UAAA,UAAA,GAAA;AACA,QAAA,OAAA,EAAA,KAAA,OADA;AAEA,QAAA,IAAA,EAAA,SAFA;AAGA,QAAA,MAAA,EAAA,KAAA,WAAA,CAAA;AAHA,OAAA;AAKA,WAAA,OAAA,CAAA,IAAA,CAAA,WAAA,EAAA,UAAA;AACA,WAAA,OAAA,GAAA,EAAA;AACA;AAtBA;AArCA,CAAA","sourcesContent":["<template>\n  <div>\n      {{this.currentUser}}\n    <h1 v-if=\"currentUser.name\">Yo Whaddup {{currentUser.name}}!</h1>\n    <h3 v-if=\"currentUser.name && filteredUsers.length > 0\">You're here with <span v-for=\"user in filteredUsers\" :key=\"user.id\" >{{user.name}}</span></h3>\n    <h3 v-else-if=\"currentUser.name && filteredUsers.length === 0\">You're in here all by your lonesome.</h3>\n    <p v-if=\"isConnected\">We're live.</p>\n    <p v-if=\"!isConnected\">The system is down.</p>\n\n    <b-input-group v-if=\"!currentUser.name\">\n        <b-form-input  placeholder=\"What's yo name?\" v-model=\"name\"/>\n        <b-input-group-append>\n            <b-button variant=\"primary\" @click=\"connectUser()\">Chat!</b-button>\n        </b-input-group-append>\n    </b-input-group>\n\n    <b-list-group v-for=\"event in events\" :key=\"event.time\">\n        <b-list-group-item class=\"d-flex justify-content-between align-items-center\">\n            {{event.message}}\n        </b-list-group-item>\n    </b-list-group>\n    <b-input-group v-if=\"currentUser.name\">\n        <b-form-input  placeholder=\"Say Stuff\" v-model=\"message\"/>\n        <b-input-group-append>\n            <b-button variant=\"primary\" @click=\"sendMessage()\">Chat!</b-button>\n        </b-input-group-append>\n    </b-input-group>\n\n    <!-- <b-list-group v-for=\"user in users\" :key=\"user.id\">\n        <b-list-group-item disabled>{{user.name}}</b-list-group-item>\n    </b-list-group> -->\n  </div>\n</template>\n\n<script>\n\nexport default {\n    components: {\n\t},\n    data () {\n        return {\n            isConnected: false,\n            name: \"\",\n            message: \"\",\n            currentUser: {},\n            users: [],\n            events: []\n        }\n    },\n    sockets: {\n        connect() {\n            this.isConnected = true;\n        },\n        disconnect() {\n            this.isConnected = false;\n        },\n        currentEvents(events) {\n            this.events = events\n        },\n        currentUsers(users) {\n            this.users = users\n        }\n    },\n    created() {\n        // document.addEventListener(\"beforeunload\", () => this.disconnectUser)\n        window.addEventListener(\"beforeunload\", this.disconnectUser)\n    },\n    computed : {\n        filteredUsers : () => {\n            return this.users.filter(user => user.name !== this.currentUser.name)\n        },\n        isOwnEvent : (event) => event.id === this.currentUser.id \n    },\n\tmethods: {\n        async connectUser() {\n            // let self = this\n            this.$socket.emit('userJoined', {name: this.name}, (data) => {\n                // this.currentUser = Object.assign({}, JSON.parse(JSON.stringify(data)))\n                this.currentUser = data \n            })\n            this.name = \"\"\n        },\n        disconnectUser() {\n            if(this.currentUser.name) {\n                this.$socket.emit('userLeft', this.currentUser)\n            }\n        },\n        sendMessage() {\n            let newMessage = {\n                message: this.message,\n                type: 'message',\n                sender: this.currentUser.id\n            }\n            this.$socket.emit('eventSent', newMessage)\n            this.message = \"\"\n        }\n    }\n}\n</script>"],"sourceRoot":"src/components"}]}