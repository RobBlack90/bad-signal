{"remainingRequest":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/src/components/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/src/components/Home.vue","mtime":1552112712000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/wait-what/client/wait-what/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n    components: {\n\t},\n    data () {\n        return {\n            isConnected: false,\n            name: \"\",\n            message: \"\",\n            currentUser: {},\n            users: [],\n            events: []\n        }\n    },\n    sockets: {\n        connect() {\n            this.isConnected = true;\n        },\n        disconnect() {\n            this.isConnected = false;\n        },\n        currentEvents(events) {\n            this.events = events\n        },\n        currentUsers(users) {\n            this.users = users\n        }\n    },\n    created() {\n        // document.addEventListener(\"beforeunload\", () => this.disconnectUser)\n        window.addEventListener(\"beforeunload\", this.disconnectUser)\n    },\n    computed : {\n        filteredUsers : () => {\n            return this.users.filter(user => user.name !== this.currentUser.name)\n        },\n        isOwnEvent : (event) => event.id === this.currentUser.id \n    },\n\tmethods: {\n        async connectUser() {\n            // let self = this\n            this.$socket.emit('userJoined', {name: this.name}, (data) => {\n                // this.currentUser = Object.assign({}, JSON.parse(JSON.stringify(data)))\n                this.currentUser = data \n            })\n            this.name = \"\"\n        },\n        disconnectUser() {\n            if(this.currentUser.name) {\n                this.$socket.emit('userLeft', this.currentUser)\n            }\n        },\n        sendMessage() {\n            let newMessage = {\n                message: this.message,\n                type: 'message',\n                sender: this.currentUser.id\n            }\n            this.$socket.emit('eventSent', newMessage)\n            this.message = \"\"\n        }\n    }\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n      {{this.currentUser}}\n    <h1 v-if=\"currentUser.name\">Yo Whaddup {{currentUser.name}}!</h1>\n    <h3 v-if=\"currentUser.name && filteredUsers.length > 0\">You're here with <span v-for=\"user in filteredUsers\" :key=\"user.id\" >{{user.name}}</span></h3>\n    <h3 v-else-if=\"currentUser.name && filteredUsers.length === 0\">You're in here all by your lonesome.</h3>\n    <p v-if=\"isConnected\">We're live.</p>\n    <p v-if=\"!isConnected\">The system is down.</p>\n\n    <b-input-group v-if=\"!currentUser.name\">\n        <b-form-input  placeholder=\"What's yo name?\" v-model=\"name\"/>\n        <b-input-group-append>\n            <b-button variant=\"primary\" @click=\"connectUser()\">Chat!</b-button>\n        </b-input-group-append>\n    </b-input-group>\n\n    <b-list-group v-for=\"event in events\" :key=\"event.time\">\n        <b-list-group-item class=\"d-flex justify-content-between align-items-center\">\n            {{event.message}}\n        </b-list-group-item>\n    </b-list-group>\n    <b-input-group v-if=\"currentUser.name\">\n        <b-form-input  placeholder=\"Say Stuff\" v-model=\"message\"/>\n        <b-input-group-append>\n            <b-button variant=\"primary\" @click=\"sendMessage()\">Chat!</b-button>\n        </b-input-group-append>\n    </b-input-group>\n\n    <!-- <b-list-group v-for=\"user in users\" :key=\"user.id\">\n        <b-list-group-item disabled>{{user.name}}</b-list-group-item>\n    </b-list-group> -->\n  </div>\n</template>\n\n<script>\n\nexport default {\n    components: {\n\t},\n    data () {\n        return {\n            isConnected: false,\n            name: \"\",\n            message: \"\",\n            currentUser: {},\n            users: [],\n            events: []\n        }\n    },\n    sockets: {\n        connect() {\n            this.isConnected = true;\n        },\n        disconnect() {\n            this.isConnected = false;\n        },\n        currentEvents(events) {\n            this.events = events\n        },\n        currentUsers(users) {\n            this.users = users\n        }\n    },\n    created() {\n        // document.addEventListener(\"beforeunload\", () => this.disconnectUser)\n        window.addEventListener(\"beforeunload\", this.disconnectUser)\n    },\n    computed : {\n        filteredUsers : () => {\n            return this.users.filter(user => user.name !== this.currentUser.name)\n        },\n        isOwnEvent : (event) => event.id === this.currentUser.id \n    },\n\tmethods: {\n        async connectUser() {\n            // let self = this\n            this.$socket.emit('userJoined', {name: this.name}, (data) => {\n                // this.currentUser = Object.assign({}, JSON.parse(JSON.stringify(data)))\n                this.currentUser = data \n            })\n            this.name = \"\"\n        },\n        disconnectUser() {\n            if(this.currentUser.name) {\n                this.$socket.emit('userLeft', this.currentUser)\n            }\n        },\n        sendMessage() {\n            let newMessage = {\n                message: this.message,\n                type: 'message',\n                sender: this.currentUser.id\n            }\n            this.$socket.emit('eventSent', newMessage)\n            this.message = \"\"\n        }\n    }\n}\n</script>"]}]}