{"remainingRequest":"/Users/blackr/Documents/Development/Personal/bad-signal/client/bad-signal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/blackr/Documents/Development/Personal/bad-signal/client/bad-signal/src/components/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/blackr/Documents/Development/Personal/bad-signal/client/bad-signal/src/components/Home.vue","mtime":1563381574000},{"path":"/Users/blackr/Documents/Development/Personal/bad-signal/client/bad-signal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/bad-signal/client/bad-signal/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/bad-signal/client/bad-signal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/blackr/Documents/Development/Personal/bad-signal/client/bad-signal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { users } from '@/services/api.js'\n// import { events } from '@/services/api.js'\n\n\nexport default {\n    components: {\n\t},\n    data () {\n        return {\n            isConnected: false,\n            name: \"\",\n            message: \"\",\n            currentUser: null,\n            userList: [],\n            eventList: [],\n            offlineUsers: []\n        }\n    },\n    sockets: {\n        connect() {\n            this.isConnected = true;\n        },\n        disconnect() {\n            this.isConnected = false;\n        },\n        newEvent(event) {\n            // eslint-disable-next-line\n            console.log('this thing on?')\n            this.eventList.push(event)\n        },\n        currentUsers(users) {\n            // eslint-disable-next-line\n            console.log('users')\n            // eslint-disable-next-line\n            console.log(users)\n            this.userList = users\n        }\n    },\n    created() {\n        // document.addEventListener(\"beforeunload\", () => this.disconnectUser)\n        window.addEventListener(\"beforeunload\", this.disconnectUser)\n    },\n    async mounted() {\n        this.setOfflineUsers()\n    },\n    computed: {\n        filteredUsers: function() {  \n            // eslint-disable-next-line\n            console.log('filtering')\n            return this.userList.filter(user => user._id !== this.currentUser._id)\n        },\n        userAvatar: function() {\n            return (id) => `https://api.adorable.io/avatars/285/${id}.png`\n        },\n        isOwnEvent: function(event) {\n            return event._id === this.currentUser._id \n        }\n    },\n\tmethods: {\n        async connectUser(user) {\n            if(!user) {\n                this.currentUser = await users.create({name: this.name})\n            } else {\n                this.currentUser = user\n            }\n            this.$socket.emit('userJoined', this.currentUser)\n            this.currentUser.isOnline = true\n            this.name = \"\"\n        },\n        disconnectUser() {\n            if(this.currentUser.name) {\n                this.$socket.emit('userLeft', this.currentUser)\n            }\n        },\n        sendMessage() {\n            let newMessage = {\n                message: this.message,\n                type: 'message',\n                user: this.currentUser\n            }\n            this.$socket.emit('eventSent', newMessage)\n            this.message = \"\"\n        },\n        async setOfflineUsers() {\n            this.offlineUsers = await users.list({isOnline:false})\n        }\n    }\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <b-img v-if=currentUser :src=\"userAvatar(currentUser._id)\"></b-img>\n    <h1 v-if=\"currentUser\">Yo Whaddup {{currentUser.name}}!</h1>\n    <h3 v-if=\"currentUser && filteredUsers.length > 0\">You're here with <span v-for=\"user in filteredUsers\" :key=\"user._id\" >{{user.name}}, </span></h3>\n    <h3 v-else-if=\"currentUser && filteredUsers.length === 0\">You're in here all by your lonesome.</h3>\n    <p v-if=\"isConnected\">We're live.</p>\n    <p v-if=\"!isConnected\">The system is down.</p>\n\n    <b-input-group v-if=\"!currentUser\">\n        <b-form-input  placeholder=\"What's yo name?\" v-model=\"name\"/>\n        <b-input-group-append>\n            <b-button variant=\"primary\" @click=\"connectUser()\">Connect!</b-button>\n        </b-input-group-append>\n    </b-input-group>\n\n    <div v-if=\"!currentUser\">\n        <b-list-group v-for=\"user in offlineUsers\" :key=\"user._id\">\n            <b-list-group-item @click=\"connectUser(user)\">{{user.name}}</b-list-group-item>\n        </b-list-group>\n    </div>\n\n    <div v-if=\"currentUser\">\n        <b-list-group v-for=\"event in eventList\" :key=\"event.time\">\n            <b-list-group-item class=\"d-flex justify-content-between align-items-center\">\n                {{event.message}}\n            </b-list-group-item>\n        </b-list-group>\n        <b-input-group>\n            <b-form-input  placeholder=\"Say Stuff\" v-model=\"message\"/>\n            <b-input-group-append>\n                <b-button variant=\"primary\" @click=\"sendMessage()\">Chat!</b-button>\n            </b-input-group-append>\n        </b-input-group>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport { users } from '@/services/api.js'\n// import { events } from '@/services/api.js'\n\n\nexport default {\n    components: {\n\t},\n    data () {\n        return {\n            isConnected: false,\n            name: \"\",\n            message: \"\",\n            currentUser: null,\n            userList: [],\n            eventList: [],\n            offlineUsers: []\n        }\n    },\n    sockets: {\n        connect() {\n            this.isConnected = true;\n        },\n        disconnect() {\n            this.isConnected = false;\n        },\n        newEvent(event) {\n            // eslint-disable-next-line\n            console.log('this thing on?')\n            this.eventList.push(event)\n        },\n        currentUsers(users) {\n            // eslint-disable-next-line\n            console.log('users')\n            // eslint-disable-next-line\n            console.log(users)\n            this.userList = users\n        }\n    },\n    created() {\n        // document.addEventListener(\"beforeunload\", () => this.disconnectUser)\n        window.addEventListener(\"beforeunload\", this.disconnectUser)\n    },\n    async mounted() {\n        this.setOfflineUsers()\n    },\n    computed: {\n        filteredUsers: function() {  \n            // eslint-disable-next-line\n            console.log('filtering')\n            return this.userList.filter(user => user._id !== this.currentUser._id)\n        },\n        userAvatar: function() {\n            return (id) => `https://api.adorable.io/avatars/285/${id}.png`\n        },\n        isOwnEvent: function(event) {\n            return event._id === this.currentUser._id \n        }\n    },\n\tmethods: {\n        async connectUser(user) {\n            if(!user) {\n                this.currentUser = await users.create({name: this.name})\n            } else {\n                this.currentUser = user\n            }\n            this.$socket.emit('userJoined', this.currentUser)\n            this.currentUser.isOnline = true\n            this.name = \"\"\n        },\n        disconnectUser() {\n            if(this.currentUser.name) {\n                this.$socket.emit('userLeft', this.currentUser)\n            }\n        },\n        sendMessage() {\n            let newMessage = {\n                message: this.message,\n                type: 'message',\n                user: this.currentUser\n            }\n            this.$socket.emit('eventSent', newMessage)\n            this.message = \"\"\n        },\n        async setOfflineUsers() {\n            this.offlineUsers = await users.list({isOnline:false})\n        }\n    }\n}\n</script>"]}]}